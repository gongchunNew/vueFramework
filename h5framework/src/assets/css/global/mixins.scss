/* ------------------------------------------ scss mixin ------------------------------------------ */

// 双向居中flex
@mixin display-flex {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  // line-height与height相同
  @mixin lineheight-height($line-height: 20px) {
    height: $line-height;
    line-height: $line-height;
  }
  
  // 一行超出显示...
  @mixin overflow-emphasis {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  // 多行超出显示...
  @mixin line-emphasis($lineCount: 1) {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: -o-ellipsis-lastline;
    text-overflow: ellipsis;
    -webkit-line-clamp: $lineCount;
    -webkit-box-orient: vertical;
  }
  
  // 清除浮动
  @mixin clearfix {
    &::before,
    &::after {
      display: table;
      content: "";
    }
  
    &::after {
      clear: both;
    }
  }
  
  // 居中块元素
  @mixin center-block {
    display: block;
    margin-right: auto;
    margin-left: auto;
  }
  
  // 三角形
  @mixin triangle($width: 10px, $height: 10px, $color:red, $direction: top) {
    $angle-direction: ( top: bottom left right, bottom: top left right, left: right top bottom, right: left top bottom);
    $conf: map-get($angle-direction, $direction);
  
    @if $direction == top or $direction == bottom {
      $width: $width/2;
    }
  
    @else {
      $height: $height/2;
    }
  
    width: 0;
    height: 0;
    border-#{nth($conf, 1)}: $height solid $color;
    border-#{nth($conf, 2)}: $width solid transparent;
    border-#{nth($conf, 3)}: $width solid transparent;
  }
  
  // vw画小圆在安卓上会有不圆的情况，用媒体查询 + px进行适配
  @mixin small-circle($px, $border-px: 0, $border-type: solid, $border-color: transparent) {
    @media screen and (max-width: 500px) {
      width: $px;
      height: $px;
      border: $border-px $border-type $border-color;
    }
  
    @media screen and (min-width: 500px) and (max-width: 767px) {
      width: $px * 1.5;
      height: $px * 1.5;
      border: $border-px * 1.5 $border-type $border-color;
    }
  
    @media screen and (min-width: 768px) and (max-width: 1023px) {
      width: $px * 2;
      height: $px * 2;
      border: $border-px * 2 $border-type $border-color;
    }
  
    @media screen and (min-width: 1024px) {
      width: $px * 3;
      height: $px * 3;
      border: $border-px * 3 $border-type $border-color;
    }
  }
  
  /**
  * 1px边框
  * {List}: 多个方向边框, 默认值为bottom, 你可以根据需要传入(top, left, bottom, right) 4个方向;
  * {Color} 边框的颜色, 默认#ccc;
  * {List} 4个圆角半径, 默认0;
  * {String} 一个高级设置, 一般都不需要改动, 由于细边框的实现使用了css的伪类, 所以为了规避可能出现的样式冲突, 我们可以自己指定使用:after还是:before, 默认after;
  */
  @mixin border1px(
    $directionMaps: bottom,
    $color: #ccc,
    $radius: (
      0,
      0,
      0,
      0
    ),
    $position: after
  ) {
    // 是否只有一个方向
    $isOnlyOneDir: string==type-of($directionMaps);
  
    @if ($isOnlyOneDir) {
      $directionMaps: ($directionMaps);
    }
  
    @each $directionMap in $directionMaps {
      border-#{$directionMap}: 1px solid $color;
    }
  
    // 判断圆角是list还是number
    @if (list==type-of($radius)) {
      border-radius:
        nth($radius, 1)
        nth($radius, 2)
        nth($radius, 3)
        nth($radius, 4);
    }
  
    @else {
      border-radius: $radius;
    }
  
    @media only screen and (-webkit-min-device-pixel-ratio: 2) {
      & {
        position: relative;
  
        // 删除1像素密度比下的边框
        @each $directionMap in $directionMaps {
          border-#{$directionMap}: none;
        }
      }
  
      &:#{$position} {
        position: absolute;
        top: 0;
        left: 0;
        box-sizing: border-box;
        display: block;
        width: 200%;
        height: 200%;
        padding: 1px;
        pointer-events: none;
        content: "";
        border: 0 solid $color;
        transform: scale(0.5);
        transform-origin: 0 0;
  
        @each $directionMap in $directionMaps {
          border-#{$directionMap}-width: 1px;
        }
  
        // 判断圆角是list还是number
        @if (list==type-of($radius)) {
          border-radius:
            nth($radius, 1) *
            2
            nth($radius, 2) *
            2
            nth($radius, 3) *
            2
            nth($radius, 4) *
            2;
        }
  
        @else {
          border-radius: $radius * 2;
        }
      }
    }
  
    @media only screen and (-webkit-min-device-pixel-ratio: 3) {
      &:#{$position} {
        // 判断圆角是list还是number
        @if (list==type-of($radius)) {
          border-radius:
            nth($radius, 1) *
            3
            nth($radius, 2) *
            3
            nth($radius, 3) *
            3
            nth($radius, 4) *
            3;
        }
  
        @else {
          border-radius: $radius * 3;
        }
  
        width: 300%;
        height: 300%;
        transform: scale(0.3333);
      }
    }
  }
  
  // button样式清除
  @mixin reset-button {
    padding: 0;
    font: inherit;
    color: inherit;
    background-color: transparent;
    border: none;
  }
  
  // input样式清除
  @mixin reset-input {
    text-decoration: none;
    border: none;
    outline: none;
  }
  